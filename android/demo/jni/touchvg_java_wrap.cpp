/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __ANDROID__
#define SWIG_JAVA_NO_DETACH_CURRENT_THREAD
#define SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON
#include <android/log.h>
#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,"vgjni",__VA_ARGS__)
#endif

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_touchvgJNI = NULL;
    jmethodID director_methids[28];
  }
}

#include "gicanvas.h"
#include "gicoreview.h"
#include "gimousehelper.h"
#include "testcanvas.h"


struct TmpJOBJ {
    JNIEnv* env;
    jobject* jo;
    template <class T>
    TmpJOBJ(JNIEnv* e, T* v) : env(e), jo((jobject*)v) { }
    ~TmpJOBJ() { if (*jo) { env->DeleteLocalRef(*jo); *jo = 0; } }
};
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* /*ajvm*/, void* /*reserved*/) {
    return JNI_VERSION_1_6;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "touchvg_java_wrap.h"

SwigDirector_GiCanvas::SwigDirector_GiCanvas(JNIEnv *jenv) : GiCanvas(), Swig::Director(jenv) {
}

SwigDirector_GiCanvas::~SwigDirector_GiCanvas() {
  //swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_GiCanvas::setPen(int argb, float width, int style, float phase) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jargb  ;
  jfloat jwidth  ;
  jint jstyle  ;
  jfloat jphase  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::setPen.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jargb = (jint) argb;
    jwidth = (jfloat) width;
    jstyle = (jint) style;
    jphase = (jfloat) phase;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[0], swigjobj, jargb, jwidth, jstyle, jphase);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::setBrush(int argb, int style) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jargb  ;
  jint jstyle  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::setBrush.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jargb = (jint) argb;
    jstyle = (jint) style;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[1], swigjobj, jargb, jstyle);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::clearRect(float x, float y, float w, float h) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::clearRect.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[2], swigjobj, jx, jy, jw, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::drawRect(float x, float y, float w, float h, bool stroke, bool fill) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  jboolean jstroke  ;
  jboolean jfill  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::drawRect.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jstroke = (jboolean) stroke;
    jfill = (jboolean) fill;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[3], swigjobj, jx, jy, jw, jh, jstroke, jfill);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::drawLine(float x1, float y1, float x2, float y2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx1  ;
  jfloat jy1  ;
  jfloat jx2  ;
  jfloat jy2  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::drawLine.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx1 = (jfloat) x1;
    jy1 = (jfloat) y1;
    jx2 = (jfloat) x2;
    jy2 = (jfloat) y2;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[4], swigjobj, jx1, jy1, jx2, jy2);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::drawEllipse(float x, float y, float w, float h, bool stroke, bool fill) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  jboolean jstroke  ;
  jboolean jfill  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::drawEllipse.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jstroke = (jboolean) stroke;
    jfill = (jboolean) fill;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[5], swigjobj, jx, jy, jw, jh, jstroke, jfill);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::beginPath() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::beginPath.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::moveTo(float x, float y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::moveTo.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[7], swigjobj, jx, jy);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::lineTo(float x, float y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  
  if (!swig_override[8]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::lineTo.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[8], swigjobj, jx, jy);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::bezierTo(float c1x, float c1y, float c2x, float c2y, float x, float y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jc1x  ;
  jfloat jc1y  ;
  jfloat jc2x  ;
  jfloat jc2y  ;
  jfloat jx  ;
  jfloat jy  ;
  
  if (!swig_override[9]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::bezierTo.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jc1x = (jfloat) c1x;
    jc1y = (jfloat) c1y;
    jc2x = (jfloat) c2x;
    jc2y = (jfloat) c2y;
    jx = (jfloat) x;
    jy = (jfloat) y;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[9], swigjobj, jc1x, jc1y, jc2x, jc2y, jx, jy);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::quadTo(float cpx, float cpy, float x, float y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jcpx  ;
  jfloat jcpy  ;
  jfloat jx  ;
  jfloat jy  ;
  
  if (!swig_override[10]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::quadTo.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcpx = (jfloat) cpx;
    jcpy = (jfloat) cpy;
    jx = (jfloat) x;
    jy = (jfloat) y;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[10], swigjobj, jcpx, jcpy, jx, jy);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::closePath() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::closePath.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[11], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::drawPath(bool stroke, bool fill) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jstroke  ;
  jboolean jfill  ;
  
  if (!swig_override[12]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::drawPath.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstroke = (jboolean) stroke;
    jfill = (jboolean) fill;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[12], swigjobj, jstroke, jfill);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::saveClip() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[13]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::saveClip.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[13], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::restoreClip() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[14]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::restoreClip.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[14], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_GiCanvas::clipRect(float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  
  if (!swig_override[15]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::clipRect.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_touchvgJNI, Swig::director_methids[15], swigjobj, jx, jy, jw, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvas::clipPath() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[16]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::clipPath.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_touchvgJNI, Swig::director_methids[16], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvas::drawHandle(float x, float y, int type) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jint jtype  ;
  
  if (!swig_override[17]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::drawHandle.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jtype = (jint) type;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[17], swigjobj, jx, jy, jtype);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvas::drawBitmap(char const *name, float xc, float yc, float w, float h, float angle) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0; TmpJOBJ jtmp(jenv, &jname);
  jfloat jxc  ;
  jfloat jyc  ;
  jfloat jw  ;
  jfloat jh  ;
  jfloat jangle  ;
  
  if (!swig_override[18]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::drawBitmap.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jxc = (jfloat) xc;
    jyc = (jfloat) yc;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jangle = (jfloat) angle;
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[18], swigjobj, jname, jxc, jyc, jw, jh, jangle);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

float SwigDirector_GiCanvas::drawTextAt(char const *text, float x, float y, float h, int align) {
  float c_result = SwigValueInit< float >() ;
  jfloat jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtext = 0; TmpJOBJ jtmp(jenv, &jtext);
  jfloat jx  ;
  jfloat jy  ;
  jfloat jh  ;
  jint jalign  ;
  
  if (!swig_override[19]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiCanvas::drawTextAt.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtext = 0;
    if (text) {
      jtext = jenv->NewStringUTF((const char *)text);
      if (!jtext) return c_result;
    }
    jx = (jfloat) x;
    jy = (jfloat) y;
    jh = (jfloat) h;
    jalign = (jint) align;
    jresult = (jfloat) jenv->CallStaticFloatMethod(Swig::jclass_touchvgJNI, Swig::director_methids[19], swigjobj, jtext, jx, jy, jh, jalign);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (float)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvas::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "setPen", "(IFIF)V", NULL 
    },
    {
      "setBrush", "(II)V", NULL 
    },
    {
      "clearRect", "(FFFF)V", NULL 
    },
    {
      "drawRect", "(FFFFZZ)V", NULL 
    },
    {
      "drawLine", "(FFFF)V", NULL 
    },
    {
      "drawEllipse", "(FFFFZZ)V", NULL 
    },
    {
      "beginPath", "()V", NULL 
    },
    {
      "moveTo", "(FF)V", NULL 
    },
    {
      "lineTo", "(FF)V", NULL 
    },
    {
      "bezierTo", "(FFFFFF)V", NULL 
    },
    {
      "quadTo", "(FFFF)V", NULL 
    },
    {
      "closePath", "()V", NULL 
    },
    {
      "drawPath", "(ZZ)V", NULL 
    },
    {
      "saveClip", "()V", NULL 
    },
    {
      "restoreClip", "()V", NULL 
    },
    {
      "clipRect", "(FFFF)Z", NULL 
    },
    {
      "clipPath", "()Z", NULL 
    },
    {
      "drawHandle", "(FFI)V", NULL 
    },
    {
      "drawBitmap", "(Ljava/lang/String;FFFFF)V", NULL 
    },
    {
      "drawTextAt", "(Ljava/lang/String;FFFI)F", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("touchvg/jni/GiCanvas");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 20; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_GiView::SwigDirector_GiView(JNIEnv *jenv) : GiView(), Swig::Director(jenv) {
}

SwigDirector_GiView::~SwigDirector_GiView() {
  //swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_GiView::regenAll() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiView::regenAll.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[20], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiView::regenAppend() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiView::regenAppend.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[21], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiView::redraw() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method GiView::redraw.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[22], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_GiView::useFinger() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return GiView::useFinger();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_touchvgJNI, Swig::director_methids[23], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiView::isContextActionsVisible() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return GiView::isContextActionsVisible();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_touchvgJNI, Swig::director_methids[24], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiView::showContextActions(mgvector< int > const &actions, float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jactions = 0 ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  
  if (!swig_override[5]) {
    return GiView::showContextActions(actions,x,y,w,h);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(mgvector< int > **)&jactions = (mgvector< int > *) &actions; 
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_touchvgJNI, Swig::director_methids[25], swigjobj, jactions, jx, jy, jw, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiView::commandChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    GiView::commandChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[26], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiView::selectionChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    GiView::selectionChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_touchvgJNI, Swig::director_methids[27], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiView::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "regenAll", "()V", NULL 
    },
    {
      "regenAppend", "()V", NULL 
    },
    {
      "redraw", "()V", NULL 
    },
    {
      "useFinger", "()Z", NULL 
    },
    {
      "isContextActionsVisible", "()Z", NULL 
    },
    {
      "showContextActions", "(Ltouchvg/jni/Ints;FFFF)Z", NULL 
    },
    {
      "commandChanged", "()V", NULL 
    },
    {
      "selectionChanged", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("touchvg/jni/GiView");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_delete_1Ints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mgvector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1Ints(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  mgvector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (mgvector< int > *)new mgvector< int >(arg1);
  *(mgvector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_Ints_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< int > **)&jarg1; 
  result = (int)((mgvector< int > const *)arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_Ints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((mgvector< int > const *)arg1)->get(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_Ints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_delete_1GiCanvas(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiCanvas **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1setPen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jint jarg4, jfloat jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->setPen(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1setBrush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setBrush(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1clearRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->clearRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1drawRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jboolean jarg6, jboolean jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawRect(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1drawLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1drawEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jboolean jarg6, jboolean jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1beginPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  (arg1)->beginPath();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1moveTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1lineTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->lineTo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1bezierTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1quadTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->quadTo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1closePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  (arg1)->closePath();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1drawPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->drawPath(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1saveClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  (arg1)->saveClip();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1restoreClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  (arg1)->restoreClip();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1clipRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->clipRect(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1clipPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  result = (bool)(arg1)->clipPath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1drawHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jint jarg4) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->drawHandle(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1drawBitmap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->drawBitmap((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1drawTextAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jfloat jresult = 0 ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (float)(arg1)->drawTextAt((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jfloat)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiCanvas(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiCanvas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiCanvas *)new SwigDirector_GiCanvas(jenv);
  *(GiCanvas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  GiCanvas *obj = *((GiCanvas **)&objarg);
  (void)jcls;
  SwigDirector_GiCanvas *director = dynamic_cast<SwigDirector_GiCanvas *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCanvas_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  GiCanvas *obj = *((GiCanvas **)&objarg);
  SwigDirector_GiCanvas *director = dynamic_cast<SwigDirector_GiCanvas *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_delete_1GiView(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiView **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1regenAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  (arg1)->regenAll();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1regenAppend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  (arg1)->regenAppend();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1redraw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  (arg1)->redraw();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiView_1useFinger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  result = (bool)(arg1)->useFinger();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiView_1useFingerSwigExplicitGiView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  result = (bool)(arg1)->GiView::useFinger();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiView_1isContextActionsVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  result = (bool)(arg1)->isContextActionsVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiView_1isContextActionsVisibleSwigExplicitGiView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  result = (bool)(arg1)->GiView::isContextActionsVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiView_1showContextActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiView *arg1 = (GiView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiView **)&jarg1; 
  arg2 = *(mgvector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< int > const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->showContextActions((mgvector< int > const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiView_1showContextActionsSwigExplicitGiView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiView *arg1 = (GiView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiView **)&jarg1; 
  arg2 = *(mgvector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< int > const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->GiView::showContextActions((mgvector< int > const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1commandChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  (arg1)->commandChanged();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1commandChangedSwigExplicitGiView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  (arg1)->GiView::commandChanged();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1selectionChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  (arg1)->selectionChanged();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1selectionChangedSwigExplicitGiView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiView *arg1 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiView **)&jarg1; 
  (arg1)->GiView::selectionChanged();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiView(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiView *)new SwigDirector_GiView(jenv);
  *(GiView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  GiView *obj = *((GiView **)&objarg);
  (void)jcls;
  SwigDirector_GiView *director = dynamic_cast<SwigDirector_GiView *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiView_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  GiView *obj = *((GiView **)&objarg);
  SwigDirector_GiView *director = dynamic_cast<SwigDirector_GiView *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiColor *)new GiColor();
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3,arg4);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiColor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiColor *arg1 = 0 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (GiColor *)new GiColor((GiColor const &)*arg1);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiColor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiColor *)new GiColor(arg1,arg2);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiColor_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (GiColor *)new GiColor(arg1);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1White(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  result = GiColor::White();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1Black(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  result = GiColor::Black();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1Invalid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  result = GiColor::Invalid();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1getARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (int)((GiColor const *)arg1)->getARGB();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1setARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setARGB(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1isInvalid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (bool)((GiColor const *)arg1)->isInvalid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiColor_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  GiColor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (bool)((GiColor const *)arg1)->equals((GiColor const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_delete_1GiColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiColor *arg1 = (GiColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kGiLineSolid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiLineStyle result;
  
  (void)jenv;
  (void)jcls;
  result = (GiLineStyle)kGiLineSolid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextCopyNone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextCopyNone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextLineRGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineRGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextLineAlpha_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineAlpha;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextLineARGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineARGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextLineWidth_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineWidth;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextLineStyle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineStyle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextFillRGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextFillRGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextFillAlpha_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextFillAlpha;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextFillARGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextFillARGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_kContextCopyAll_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextCopyAll;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiContext *)new GiContext();
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  bool arg5 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = *(GiColor **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4,arg5);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiContext_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = *(GiColor **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiContext_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiContext_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  result = (GiContext *)new GiContext(arg1,arg2);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiContext_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (GiContext *)new GiContext(arg1);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiContext_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiContext *arg1 = 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  result = (GiContext *)new GiContext((GiContext const &)*arg1);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2,arg3);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  result = (bool)((GiContext const *)arg1)->equals((GiContext const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getLineStyle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineStyle(arg2);
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getLineWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (float)((GiContext const *)arg1)->getLineWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1isAutoScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->isAutoScale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setLineWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  GiContext *arg1 = (GiContext *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setLineWidth(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1isNullLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->isNullLine();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setNullLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  (arg1)->setNullLine();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getLineColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = ((GiContext const *)arg1)->getLineColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setLineColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return ;
  } 
  (arg1)->setLineColor((GiColor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setLineColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLineColor(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setLineColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setLineColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getLineARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getLineARGB();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setLineARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineARGB(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getLineAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getLineAlpha();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setLineAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineAlpha(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1hasFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->hasFillColor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setNoFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  (arg1)->setNoFillColor();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = ((GiContext const *)arg1)->getFillColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setFillColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return ;
  } 
  (arg1)->setFillColor((GiColor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setFillColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setFillColor(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setFillColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setFillColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getFillARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getFillARGB();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setFillARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillARGB(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getFillAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getFillAlpha();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setFillAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillAlpha(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1isAutoFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->isAutoFillColor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1setAutoFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoFillColor(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiContext_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_delete_1GiContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiCoreView_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiCoreView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (GiCoreView *)new GiCoreView(arg1);
  *(GiCoreView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1GiCoreView_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiCoreView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiCoreView *)new GiCoreView();
  *(GiCoreView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_delete_1GiCoreView(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiCoreView **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1createView_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->createView(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1createView_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  (arg1)->createView(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1createMagnifierView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiView *arg3 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = *(GiView **)&jarg3; 
  (arg1)->createMagnifierView(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1destoryView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  (arg1)->destoryView(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1drawAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = *(GiCanvas **)&jarg3; 
  result = (int)(arg1)->drawAll(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1drawAppend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = *(GiCanvas **)&jarg3; 
  result = (bool)(arg1)->drawAppend(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1dynDraw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = *(GiCanvas **)&jarg3; 
  (arg1)->dynDraw(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1setBkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->setBkColor(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1setScreenDpi(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  GiCoreView::setScreenDpi(arg1);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1onSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->onSize(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1onGesture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jfloat jarg5, jfloat jarg6, jboolean jarg7) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureType arg3 ;
  GiGestureState arg4 ;
  float arg5 ;
  float arg6 ;
  bool arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = (GiGestureType)jarg3; 
  arg4 = (GiGestureState)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->onGesture(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1onGesture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureType arg3 ;
  GiGestureState arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = (GiGestureType)jarg3; 
  arg4 = (GiGestureState)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->onGesture(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1twoFingersMove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jboolean jarg8) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureState arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = (GiGestureState)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->twoFingersMove(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1twoFingersMove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureState arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = (GiGestureState)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->twoFingersMove(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (char *)((GiCoreView const *)arg1)->getCommand();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1setCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiView **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->setCommand(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1doContextAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->doContextAction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1clearCachedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1addShapesForTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->addShapesForTest();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1getShapeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->getShapeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1getSelectedShapeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->getSelectedShapeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1getSelectedShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->getSelectedShapeType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1loadFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->loadFromFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1saveToFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->saveToFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1saveToFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->saveToFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1getContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (char *)(arg1)->getContent();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1freeContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  (arg1)->freeContent();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1setContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setContent((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1zoomToExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (bool)(arg1)->zoomToExtent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1zoomToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->zoomToModel(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1calcPenWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->calcPenWidth(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiContext *) &(arg1)->getContext(arg2);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1setContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setContext((GiContext const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1setContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setContext(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_GiCoreView_1setContextEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setContextEditing(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1initRand(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  TestCanvas::initRand();
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1randInt(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TestCanvas::randInt(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1randFloat(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jfloat jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)TestCanvas::randFloat(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1test_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  TestCanvas::test(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1test_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TestCanvas::test(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1test_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::test(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testRect(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testLine(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testEllipse(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testQuadBezier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testQuadBezier(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testCubicBezier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testCubicBezier(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testPolygon(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testClipPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testClipPath(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testHandle(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testDynCurves(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  TestCanvas::testDynCurves(arg1);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_TestCanvas_1testTextAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvas **)&jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testTextAt(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_touchvgJNI_new_1TestCanvas(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestCanvas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestCanvas *)new TestCanvas();
  *(TestCanvas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_delete_1TestCanvas(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestCanvas *arg1 = (TestCanvas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestCanvas **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_touchvgJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[28] = {
    {
      "SwigDirector_GiCanvas_setPen", "(Ltouchvg/jni/GiCanvas;IFIF)V" 
    },
    {
      "SwigDirector_GiCanvas_setBrush", "(Ltouchvg/jni/GiCanvas;II)V" 
    },
    {
      "SwigDirector_GiCanvas_clearRect", "(Ltouchvg/jni/GiCanvas;FFFF)V" 
    },
    {
      "SwigDirector_GiCanvas_drawRect", "(Ltouchvg/jni/GiCanvas;FFFFZZ)V" 
    },
    {
      "SwigDirector_GiCanvas_drawLine", "(Ltouchvg/jni/GiCanvas;FFFF)V" 
    },
    {
      "SwigDirector_GiCanvas_drawEllipse", "(Ltouchvg/jni/GiCanvas;FFFFZZ)V" 
    },
    {
      "SwigDirector_GiCanvas_beginPath", "(Ltouchvg/jni/GiCanvas;)V" 
    },
    {
      "SwigDirector_GiCanvas_moveTo", "(Ltouchvg/jni/GiCanvas;FF)V" 
    },
    {
      "SwigDirector_GiCanvas_lineTo", "(Ltouchvg/jni/GiCanvas;FF)V" 
    },
    {
      "SwigDirector_GiCanvas_bezierTo", "(Ltouchvg/jni/GiCanvas;FFFFFF)V" 
    },
    {
      "SwigDirector_GiCanvas_quadTo", "(Ltouchvg/jni/GiCanvas;FFFF)V" 
    },
    {
      "SwigDirector_GiCanvas_closePath", "(Ltouchvg/jni/GiCanvas;)V" 
    },
    {
      "SwigDirector_GiCanvas_drawPath", "(Ltouchvg/jni/GiCanvas;ZZ)V" 
    },
    {
      "SwigDirector_GiCanvas_saveClip", "(Ltouchvg/jni/GiCanvas;)V" 
    },
    {
      "SwigDirector_GiCanvas_restoreClip", "(Ltouchvg/jni/GiCanvas;)V" 
    },
    {
      "SwigDirector_GiCanvas_clipRect", "(Ltouchvg/jni/GiCanvas;FFFF)Z" 
    },
    {
      "SwigDirector_GiCanvas_clipPath", "(Ltouchvg/jni/GiCanvas;)Z" 
    },
    {
      "SwigDirector_GiCanvas_drawHandle", "(Ltouchvg/jni/GiCanvas;FFI)V" 
    },
    {
      "SwigDirector_GiCanvas_drawBitmap", "(Ltouchvg/jni/GiCanvas;Ljava/lang/String;FFFFF)V" 
    },
    {
      "SwigDirector_GiCanvas_drawTextAt", "(Ltouchvg/jni/GiCanvas;Ljava/lang/String;FFFI)F" 
    },
    {
      "SwigDirector_GiView_regenAll", "(Ltouchvg/jni/GiView;)V" 
    },
    {
      "SwigDirector_GiView_regenAppend", "(Ltouchvg/jni/GiView;)V" 
    },
    {
      "SwigDirector_GiView_redraw", "(Ltouchvg/jni/GiView;)V" 
    },
    {
      "SwigDirector_GiView_useFinger", "(Ltouchvg/jni/GiView;)Z" 
    },
    {
      "SwigDirector_GiView_isContextActionsVisible", "(Ltouchvg/jni/GiView;)Z" 
    },
    {
      "SwigDirector_GiView_showContextActions", "(Ltouchvg/jni/GiView;JFFFF)Z" 
    },
    {
      "SwigDirector_GiView_commandChanged", "(Ltouchvg/jni/GiView;)V" 
    },
    {
      "SwigDirector_GiView_selectionChanged", "(Ltouchvg/jni/GiView;)V" 
    }
  };
  Swig::jclass_touchvgJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_touchvgJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

