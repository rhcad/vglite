/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class GiView : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GiView(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GiView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GiView() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgcsPINVOKE.delete_GiView(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void regenAll() {
    touchvgcsPINVOKE.GiView_regenAll(swigCPtr);
  }

  public virtual void regenAppend() {
    touchvgcsPINVOKE.GiView_regenAppend(swigCPtr);
  }

  public virtual void redraw() {
    touchvgcsPINVOKE.GiView_redraw(swigCPtr);
  }

  public virtual bool useFinger() {
    bool ret = (SwigDerivedClassHasMethod("useFinger", swigMethodTypes3) ? touchvgcsPINVOKE.GiView_useFingerSwigExplicitGiView(swigCPtr) : touchvgcsPINVOKE.GiView_useFinger(swigCPtr));
    return ret;
  }

  public GiView() : this(touchvgcsPINVOKE.new_GiView(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("regenAll", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateGiView_0(SwigDirectorregenAll);
    if (SwigDerivedClassHasMethod("regenAppend", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateGiView_1(SwigDirectorregenAppend);
    if (SwigDerivedClassHasMethod("redraw", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateGiView_2(SwigDirectorredraw);
    if (SwigDerivedClassHasMethod("useFinger", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateGiView_3(SwigDirectoruseFinger);
    touchvgcsPINVOKE.GiView_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(GiView));
    return hasDerivedMethod;
  }

  private void SwigDirectorregenAll() {
    regenAll();
  }

  private void SwigDirectorregenAppend() {
    regenAppend();
  }

  private void SwigDirectorredraw() {
    redraw();
  }

  private bool SwigDirectoruseFinger() {
    return useFinger();
  }

  public delegate void SwigDelegateGiView_0();
  public delegate void SwigDelegateGiView_1();
  public delegate void SwigDelegateGiView_2();
  public delegate bool SwigDelegateGiView_3();

  private SwigDelegateGiView_0 swigDelegate0;
  private SwigDelegateGiView_1 swigDelegate1;
  private SwigDelegateGiView_2 swigDelegate2;
  private SwigDelegateGiView_3 swigDelegate3;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] {  };
  private static Type[] swigMethodTypes3 = new Type[] {  };
}

}
