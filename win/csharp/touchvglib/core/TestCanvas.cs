/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class TestCanvas : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TestCanvas(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TestCanvas obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TestCanvas() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgcsPINVOKE.delete_TestCanvas(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static void initRand() {
    touchvgcsPINVOKE.TestCanvas_initRand();
  }

  public static int randInt(int minv, int maxv) {
    int ret = touchvgcsPINVOKE.TestCanvas_randInt(minv, maxv);
    return ret;
  }

  public static float randFloat(float minv, float maxv) {
    float ret = touchvgcsPINVOKE.TestCanvas_randFloat(minv, maxv);
    return ret;
  }

  public static void test(GiCanvas canvas, int bits, int n, bool randStyle) {
    touchvgcsPINVOKE.TestCanvas_test__SWIG_0(GiCanvas.getCPtr(canvas), bits, n, randStyle);
  }

  public static void test(GiCanvas canvas, int bits, int n) {
    touchvgcsPINVOKE.TestCanvas_test__SWIG_1(GiCanvas.getCPtr(canvas), bits, n);
  }

  public static void test(GiCanvas canvas, int bits) {
    touchvgcsPINVOKE.TestCanvas_test__SWIG_2(GiCanvas.getCPtr(canvas), bits);
  }

  public static void testRect(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testRect(GiCanvas.getCPtr(canvas), n);
  }

  public static void testLine(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testLine(GiCanvas.getCPtr(canvas), n);
  }

  public static void testEllipse(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testEllipse(GiCanvas.getCPtr(canvas), n);
  }

  public static void testQuadBezier(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testQuadBezier(GiCanvas.getCPtr(canvas), n);
  }

  public static void testCubicBezier(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testCubicBezier(GiCanvas.getCPtr(canvas), n);
  }

  public static void testPolygon(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testPolygon(GiCanvas.getCPtr(canvas), n);
  }

  public static void testClipPath(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testClipPath(GiCanvas.getCPtr(canvas), n);
  }

  public static void testHandle(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testHandle(GiCanvas.getCPtr(canvas), n);
  }

  public static void testDynCurves(GiCanvas canvas) {
    touchvgcsPINVOKE.TestCanvas_testDynCurves(GiCanvas.getCPtr(canvas));
  }

  public static void testTextAt(GiCanvas canvas, int n) {
    touchvgcsPINVOKE.TestCanvas_testTextAt(GiCanvas.getCPtr(canvas), n);
  }

  public TestCanvas() : this(touchvgcsPINVOKE.new_TestCanvas(), true) {
  }

}

}
