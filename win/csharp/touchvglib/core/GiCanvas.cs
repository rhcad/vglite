/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class GiCanvas : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GiCanvas(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GiCanvas obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GiCanvas() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgcsPINVOKE.delete_GiCanvas(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void setPen(int argb, float width, int style, float phase) {
    touchvgcsPINVOKE.GiCanvas_setPen(swigCPtr, argb, width, style, phase);
  }

  public virtual void setBrush(int argb, int style) {
    touchvgcsPINVOKE.GiCanvas_setBrush(swigCPtr, argb, style);
  }

  public virtual void clearRect(float x, float y, float w, float h) {
    touchvgcsPINVOKE.GiCanvas_clearRect(swigCPtr, x, y, w, h);
  }

  public virtual void drawRect(float x, float y, float w, float h, bool stroke, bool fill) {
    touchvgcsPINVOKE.GiCanvas_drawRect(swigCPtr, x, y, w, h, stroke, fill);
  }

  public virtual void drawLine(float x1, float y1, float x2, float y2) {
    touchvgcsPINVOKE.GiCanvas_drawLine(swigCPtr, x1, y1, x2, y2);
  }

  public virtual void drawEllipse(float x, float y, float w, float h, bool stroke, bool fill) {
    touchvgcsPINVOKE.GiCanvas_drawEllipse(swigCPtr, x, y, w, h, stroke, fill);
  }

  public virtual void beginPath() {
    touchvgcsPINVOKE.GiCanvas_beginPath(swigCPtr);
  }

  public virtual void moveTo(float x, float y) {
    touchvgcsPINVOKE.GiCanvas_moveTo(swigCPtr, x, y);
  }

  public virtual void lineTo(float x, float y) {
    touchvgcsPINVOKE.GiCanvas_lineTo(swigCPtr, x, y);
  }

  public virtual void bezierTo(float c1x, float c1y, float c2x, float c2y, float x, float y) {
    touchvgcsPINVOKE.GiCanvas_bezierTo(swigCPtr, c1x, c1y, c2x, c2y, x, y);
  }

  public virtual void quadTo(float cpx, float cpy, float x, float y) {
    touchvgcsPINVOKE.GiCanvas_quadTo(swigCPtr, cpx, cpy, x, y);
  }

  public virtual void closePath() {
    touchvgcsPINVOKE.GiCanvas_closePath(swigCPtr);
  }

  public virtual void drawPath(bool stroke, bool fill) {
    touchvgcsPINVOKE.GiCanvas_drawPath(swigCPtr, stroke, fill);
  }

  public virtual void saveClip() {
    touchvgcsPINVOKE.GiCanvas_saveClip(swigCPtr);
  }

  public virtual void restoreClip() {
    touchvgcsPINVOKE.GiCanvas_restoreClip(swigCPtr);
  }

  public virtual bool clipRect(float x, float y, float w, float h) {
    bool ret = touchvgcsPINVOKE.GiCanvas_clipRect(swigCPtr, x, y, w, h);
    return ret;
  }

  public virtual bool clipPath() {
    bool ret = touchvgcsPINVOKE.GiCanvas_clipPath(swigCPtr);
    return ret;
  }

  public virtual void drawHandle(float x, float y, int type) {
    touchvgcsPINVOKE.GiCanvas_drawHandle(swigCPtr, x, y, type);
  }

  public virtual void drawBitmap(string name, float xc, float yc, float w, float h, float angle) {
    touchvgcsPINVOKE.GiCanvas_drawBitmap(swigCPtr, name, xc, yc, w, h, angle);
  }

  public virtual float drawTextAt(string text, float x, float y, float h, int align) {
    float ret = touchvgcsPINVOKE.GiCanvas_drawTextAt(swigCPtr, text, x, y, h, align);
    return ret;
  }

  public GiCanvas() : this(touchvgcsPINVOKE.new_GiCanvas(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("setPen", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateGiCanvas_0(SwigDirectorsetPen);
    if (SwigDerivedClassHasMethod("setBrush", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateGiCanvas_1(SwigDirectorsetBrush);
    if (SwigDerivedClassHasMethod("clearRect", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateGiCanvas_2(SwigDirectorclearRect);
    if (SwigDerivedClassHasMethod("drawRect", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateGiCanvas_3(SwigDirectordrawRect);
    if (SwigDerivedClassHasMethod("drawLine", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateGiCanvas_4(SwigDirectordrawLine);
    if (SwigDerivedClassHasMethod("drawEllipse", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateGiCanvas_5(SwigDirectordrawEllipse);
    if (SwigDerivedClassHasMethod("beginPath", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateGiCanvas_6(SwigDirectorbeginPath);
    if (SwigDerivedClassHasMethod("moveTo", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateGiCanvas_7(SwigDirectormoveTo);
    if (SwigDerivedClassHasMethod("lineTo", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateGiCanvas_8(SwigDirectorlineTo);
    if (SwigDerivedClassHasMethod("bezierTo", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateGiCanvas_9(SwigDirectorbezierTo);
    if (SwigDerivedClassHasMethod("quadTo", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateGiCanvas_10(SwigDirectorquadTo);
    if (SwigDerivedClassHasMethod("closePath", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateGiCanvas_11(SwigDirectorclosePath);
    if (SwigDerivedClassHasMethod("drawPath", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateGiCanvas_12(SwigDirectordrawPath);
    if (SwigDerivedClassHasMethod("saveClip", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateGiCanvas_13(SwigDirectorsaveClip);
    if (SwigDerivedClassHasMethod("restoreClip", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateGiCanvas_14(SwigDirectorrestoreClip);
    if (SwigDerivedClassHasMethod("clipRect", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateGiCanvas_15(SwigDirectorclipRect);
    if (SwigDerivedClassHasMethod("clipPath", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateGiCanvas_16(SwigDirectorclipPath);
    if (SwigDerivedClassHasMethod("drawHandle", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateGiCanvas_17(SwigDirectordrawHandle);
    if (SwigDerivedClassHasMethod("drawBitmap", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateGiCanvas_18(SwigDirectordrawBitmap);
    if (SwigDerivedClassHasMethod("drawTextAt", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateGiCanvas_19(SwigDirectordrawTextAt);
    touchvgcsPINVOKE.GiCanvas_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(GiCanvas));
    return hasDerivedMethod;
  }

  private void SwigDirectorsetPen(int argb, float width, int style, float phase) {
    setPen(argb, width, style, phase);
  }

  private void SwigDirectorsetBrush(int argb, int style) {
    setBrush(argb, style);
  }

  private void SwigDirectorclearRect(float x, float y, float w, float h) {
    clearRect(x, y, w, h);
  }

  private void SwigDirectordrawRect(float x, float y, float w, float h, bool stroke, bool fill) {
    drawRect(x, y, w, h, stroke, fill);
  }

  private void SwigDirectordrawLine(float x1, float y1, float x2, float y2) {
    drawLine(x1, y1, x2, y2);
  }

  private void SwigDirectordrawEllipse(float x, float y, float w, float h, bool stroke, bool fill) {
    drawEllipse(x, y, w, h, stroke, fill);
  }

  private void SwigDirectorbeginPath() {
    beginPath();
  }

  private void SwigDirectormoveTo(float x, float y) {
    moveTo(x, y);
  }

  private void SwigDirectorlineTo(float x, float y) {
    lineTo(x, y);
  }

  private void SwigDirectorbezierTo(float c1x, float c1y, float c2x, float c2y, float x, float y) {
    bezierTo(c1x, c1y, c2x, c2y, x, y);
  }

  private void SwigDirectorquadTo(float cpx, float cpy, float x, float y) {
    quadTo(cpx, cpy, x, y);
  }

  private void SwigDirectorclosePath() {
    closePath();
  }

  private void SwigDirectordrawPath(bool stroke, bool fill) {
    drawPath(stroke, fill);
  }

  private void SwigDirectorsaveClip() {
    saveClip();
  }

  private void SwigDirectorrestoreClip() {
    restoreClip();
  }

  private bool SwigDirectorclipRect(float x, float y, float w, float h) {
    return clipRect(x, y, w, h);
  }

  private bool SwigDirectorclipPath() {
    return clipPath();
  }

  private void SwigDirectordrawHandle(float x, float y, int type) {
    drawHandle(x, y, type);
  }

  private void SwigDirectordrawBitmap(string name, float xc, float yc, float w, float h, float angle) {
    drawBitmap(name, xc, yc, w, h, angle);
  }

  private float SwigDirectordrawTextAt(string text, float x, float y, float h, int align) {
    return drawTextAt(text, x, y, h, align);
  }

  public delegate void SwigDelegateGiCanvas_0(int argb, float width, int style, float phase);
  public delegate void SwigDelegateGiCanvas_1(int argb, int style);
  public delegate void SwigDelegateGiCanvas_2(float x, float y, float w, float h);
  public delegate void SwigDelegateGiCanvas_3(float x, float y, float w, float h, bool stroke, bool fill);
  public delegate void SwigDelegateGiCanvas_4(float x1, float y1, float x2, float y2);
  public delegate void SwigDelegateGiCanvas_5(float x, float y, float w, float h, bool stroke, bool fill);
  public delegate void SwigDelegateGiCanvas_6();
  public delegate void SwigDelegateGiCanvas_7(float x, float y);
  public delegate void SwigDelegateGiCanvas_8(float x, float y);
  public delegate void SwigDelegateGiCanvas_9(float c1x, float c1y, float c2x, float c2y, float x, float y);
  public delegate void SwigDelegateGiCanvas_10(float cpx, float cpy, float x, float y);
  public delegate void SwigDelegateGiCanvas_11();
  public delegate void SwigDelegateGiCanvas_12(bool stroke, bool fill);
  public delegate void SwigDelegateGiCanvas_13();
  public delegate void SwigDelegateGiCanvas_14();
  public delegate bool SwigDelegateGiCanvas_15(float x, float y, float w, float h);
  public delegate bool SwigDelegateGiCanvas_16();
  public delegate void SwigDelegateGiCanvas_17(float x, float y, int type);
  public delegate void SwigDelegateGiCanvas_18(string name, float xc, float yc, float w, float h, float angle);
  public delegate float SwigDelegateGiCanvas_19(string text, float x, float y, float h, int align);

  private SwigDelegateGiCanvas_0 swigDelegate0;
  private SwigDelegateGiCanvas_1 swigDelegate1;
  private SwigDelegateGiCanvas_2 swigDelegate2;
  private SwigDelegateGiCanvas_3 swigDelegate3;
  private SwigDelegateGiCanvas_4 swigDelegate4;
  private SwigDelegateGiCanvas_5 swigDelegate5;
  private SwigDelegateGiCanvas_6 swigDelegate6;
  private SwigDelegateGiCanvas_7 swigDelegate7;
  private SwigDelegateGiCanvas_8 swigDelegate8;
  private SwigDelegateGiCanvas_9 swigDelegate9;
  private SwigDelegateGiCanvas_10 swigDelegate10;
  private SwigDelegateGiCanvas_11 swigDelegate11;
  private SwigDelegateGiCanvas_12 swigDelegate12;
  private SwigDelegateGiCanvas_13 swigDelegate13;
  private SwigDelegateGiCanvas_14 swigDelegate14;
  private SwigDelegateGiCanvas_15 swigDelegate15;
  private SwigDelegateGiCanvas_16 swigDelegate16;
  private SwigDelegateGiCanvas_17 swigDelegate17;
  private SwigDelegateGiCanvas_18 swigDelegate18;
  private SwigDelegateGiCanvas_19 swigDelegate19;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(int), typeof(float), typeof(int), typeof(float) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(int), typeof(int) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(float), typeof(float), typeof(float), typeof(float) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(float), typeof(float), typeof(float), typeof(float), typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(float), typeof(float), typeof(float), typeof(float) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(float), typeof(float), typeof(float), typeof(float), typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(float), typeof(float) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(float), typeof(float) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(float), typeof(float), typeof(float), typeof(float), typeof(float), typeof(float) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(float), typeof(float), typeof(float), typeof(float) };
  private static Type[] swigMethodTypes11 = new Type[] {  };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes13 = new Type[] {  };
  private static Type[] swigMethodTypes14 = new Type[] {  };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(float), typeof(float), typeof(float), typeof(float) };
  private static Type[] swigMethodTypes16 = new Type[] {  };
  private static Type[] swigMethodTypes17 = new Type[] { typeof(float), typeof(float), typeof(int) };
  private static Type[] swigMethodTypes18 = new Type[] { typeof(string), typeof(float), typeof(float), typeof(float), typeof(float), typeof(float) };
  private static Type[] swigMethodTypes19 = new Type[] { typeof(string), typeof(float), typeof(float), typeof(float), typeof(int) };
}

}
