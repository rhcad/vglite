/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_touchvgcs(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_touchvgcs(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_touchvgcs(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include "gicanvas.h"
#include "gicoreview.h"
#include "gimousehelper.h"
#include "testcanvas.h"
#include "educmds.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "touchvg_csharp_wrap.h"

SwigDirector_GiCanvas::SwigDirector_GiCanvas() : GiCanvas(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_GiCanvas::~SwigDirector_GiCanvas() {
  
}


void SwigDirector_GiCanvas::setPen(int argb, float width, int style, float phase) {
  int jargb  ;
  float jwidth  ;
  int jstyle  ;
  float jphase  ;
  
  if (!swig_callbacksetPen) {
    throw Swig::DirectorPureVirtualException("GiCanvas::setPen");
  } else {
    jargb = argb;
    jwidth = width;
    jstyle = style;
    jphase = phase;
    swig_callbacksetPen(jargb, jwidth, jstyle, jphase);
  }
}

void SwigDirector_GiCanvas::setBrush(int argb, int style) {
  int jargb  ;
  int jstyle  ;
  
  if (!swig_callbacksetBrush) {
    throw Swig::DirectorPureVirtualException("GiCanvas::setBrush");
  } else {
    jargb = argb;
    jstyle = style;
    swig_callbacksetBrush(jargb, jstyle);
  }
}

void SwigDirector_GiCanvas::clearRect(float x, float y, float w, float h) {
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  
  if (!swig_callbackclearRect) {
    throw Swig::DirectorPureVirtualException("GiCanvas::clearRect");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    swig_callbackclearRect(jx, jy, jw, jh);
  }
}

void SwigDirector_GiCanvas::drawRect(float x, float y, float w, float h, bool stroke, bool fill) {
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  unsigned int jstroke  ;
  unsigned int jfill  ;
  
  if (!swig_callbackdrawRect) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawRect");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jstroke = stroke;
    jfill = fill;
    swig_callbackdrawRect(jx, jy, jw, jh, jstroke, jfill);
  }
}

void SwigDirector_GiCanvas::drawLine(float x1, float y1, float x2, float y2) {
  float jx1  ;
  float jy1  ;
  float jx2  ;
  float jy2  ;
  
  if (!swig_callbackdrawLine) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawLine");
  } else {
    jx1 = x1;
    jy1 = y1;
    jx2 = x2;
    jy2 = y2;
    swig_callbackdrawLine(jx1, jy1, jx2, jy2);
  }
}

void SwigDirector_GiCanvas::drawEllipse(float x, float y, float w, float h, bool stroke, bool fill) {
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  unsigned int jstroke  ;
  unsigned int jfill  ;
  
  if (!swig_callbackdrawEllipse) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawEllipse");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jstroke = stroke;
    jfill = fill;
    swig_callbackdrawEllipse(jx, jy, jw, jh, jstroke, jfill);
  }
}

void SwigDirector_GiCanvas::beginPath() {
  if (!swig_callbackbeginPath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::beginPath");
  } else {
    swig_callbackbeginPath();
  }
}

void SwigDirector_GiCanvas::moveTo(float x, float y) {
  float jx  ;
  float jy  ;
  
  if (!swig_callbackmoveTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::moveTo");
  } else {
    jx = x;
    jy = y;
    swig_callbackmoveTo(jx, jy);
  }
}

void SwigDirector_GiCanvas::lineTo(float x, float y) {
  float jx  ;
  float jy  ;
  
  if (!swig_callbacklineTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::lineTo");
  } else {
    jx = x;
    jy = y;
    swig_callbacklineTo(jx, jy);
  }
}

void SwigDirector_GiCanvas::bezierTo(float c1x, float c1y, float c2x, float c2y, float x, float y) {
  float jc1x  ;
  float jc1y  ;
  float jc2x  ;
  float jc2y  ;
  float jx  ;
  float jy  ;
  
  if (!swig_callbackbezierTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::bezierTo");
  } else {
    jc1x = c1x;
    jc1y = c1y;
    jc2x = c2x;
    jc2y = c2y;
    jx = x;
    jy = y;
    swig_callbackbezierTo(jc1x, jc1y, jc2x, jc2y, jx, jy);
  }
}

void SwigDirector_GiCanvas::quadTo(float cpx, float cpy, float x, float y) {
  float jcpx  ;
  float jcpy  ;
  float jx  ;
  float jy  ;
  
  if (!swig_callbackquadTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::quadTo");
  } else {
    jcpx = cpx;
    jcpy = cpy;
    jx = x;
    jy = y;
    swig_callbackquadTo(jcpx, jcpy, jx, jy);
  }
}

void SwigDirector_GiCanvas::closePath() {
  if (!swig_callbackclosePath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::closePath");
  } else {
    swig_callbackclosePath();
  }
}

void SwigDirector_GiCanvas::drawPath(bool stroke, bool fill) {
  unsigned int jstroke  ;
  unsigned int jfill  ;
  
  if (!swig_callbackdrawPath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawPath");
  } else {
    jstroke = stroke;
    jfill = fill;
    swig_callbackdrawPath(jstroke, jfill);
  }
}

void SwigDirector_GiCanvas::saveClip() {
  if (!swig_callbacksaveClip) {
    throw Swig::DirectorPureVirtualException("GiCanvas::saveClip");
  } else {
    swig_callbacksaveClip();
  }
}

void SwigDirector_GiCanvas::restoreClip() {
  if (!swig_callbackrestoreClip) {
    throw Swig::DirectorPureVirtualException("GiCanvas::restoreClip");
  } else {
    swig_callbackrestoreClip();
  }
}

bool SwigDirector_GiCanvas::clipRect(float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  
  if (!swig_callbackclipRect) {
    throw Swig::DirectorPureVirtualException("GiCanvas::clipRect");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jresult = (unsigned int) swig_callbackclipRect(jx, jy, jw, jh);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiCanvas::clipPath() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackclipPath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::clipPath");
  } else {
    jresult = (unsigned int) swig_callbackclipPath();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_GiCanvas::drawHandle(float x, float y, int type) {
  float jx  ;
  float jy  ;
  int jtype  ;
  
  if (!swig_callbackdrawHandle) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawHandle");
  } else {
    jx = x;
    jy = y;
    jtype = type;
    swig_callbackdrawHandle(jx, jy, jtype);
  }
}

void SwigDirector_GiCanvas::drawBitmap(char const *name, float xc, float yc, float w, float h, float angle) {
  char * jname = 0 ;
  float jxc  ;
  float jyc  ;
  float jw  ;
  float jh  ;
  float jangle  ;
  
  if (!swig_callbackdrawBitmap) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawBitmap");
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jxc = xc;
    jyc = yc;
    jw = w;
    jh = h;
    jangle = angle;
    swig_callbackdrawBitmap(jname, jxc, jyc, jw, jh, jangle);
  }
}

float SwigDirector_GiCanvas::drawTextAt(char const *text, float x, float y, float h, int align) {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  char * jtext = 0 ;
  float jx  ;
  float jy  ;
  float jh  ;
  int jalign  ;
  
  if (!swig_callbackdrawTextAt) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawTextAt");
  } else {
    jtext = SWIG_csharp_string_callback((const char *)text); 
    jx = x;
    jy = y;
    jh = h;
    jalign = align;
    jresult = (float) swig_callbackdrawTextAt(jtext, jx, jy, jh, jalign);
    c_result = (float)jresult; 
  }
  return c_result;
}

void SwigDirector_GiCanvas::swig_connect_director(SWIG_Callback0_t callbacksetPen, SWIG_Callback1_t callbacksetBrush, SWIG_Callback2_t callbackclearRect, SWIG_Callback3_t callbackdrawRect, SWIG_Callback4_t callbackdrawLine, SWIG_Callback5_t callbackdrawEllipse, SWIG_Callback6_t callbackbeginPath, SWIG_Callback7_t callbackmoveTo, SWIG_Callback8_t callbacklineTo, SWIG_Callback9_t callbackbezierTo, SWIG_Callback10_t callbackquadTo, SWIG_Callback11_t callbackclosePath, SWIG_Callback12_t callbackdrawPath, SWIG_Callback13_t callbacksaveClip, SWIG_Callback14_t callbackrestoreClip, SWIG_Callback15_t callbackclipRect, SWIG_Callback16_t callbackclipPath, SWIG_Callback17_t callbackdrawHandle, SWIG_Callback18_t callbackdrawBitmap, SWIG_Callback19_t callbackdrawTextAt) {
  swig_callbacksetPen = callbacksetPen;
  swig_callbacksetBrush = callbacksetBrush;
  swig_callbackclearRect = callbackclearRect;
  swig_callbackdrawRect = callbackdrawRect;
  swig_callbackdrawLine = callbackdrawLine;
  swig_callbackdrawEllipse = callbackdrawEllipse;
  swig_callbackbeginPath = callbackbeginPath;
  swig_callbackmoveTo = callbackmoveTo;
  swig_callbacklineTo = callbacklineTo;
  swig_callbackbezierTo = callbackbezierTo;
  swig_callbackquadTo = callbackquadTo;
  swig_callbackclosePath = callbackclosePath;
  swig_callbackdrawPath = callbackdrawPath;
  swig_callbacksaveClip = callbacksaveClip;
  swig_callbackrestoreClip = callbackrestoreClip;
  swig_callbackclipRect = callbackclipRect;
  swig_callbackclipPath = callbackclipPath;
  swig_callbackdrawHandle = callbackdrawHandle;
  swig_callbackdrawBitmap = callbackdrawBitmap;
  swig_callbackdrawTextAt = callbackdrawTextAt;
}

void SwigDirector_GiCanvas::swig_init_callbacks() {
  swig_callbacksetPen = 0;
  swig_callbacksetBrush = 0;
  swig_callbackclearRect = 0;
  swig_callbackdrawRect = 0;
  swig_callbackdrawLine = 0;
  swig_callbackdrawEllipse = 0;
  swig_callbackbeginPath = 0;
  swig_callbackmoveTo = 0;
  swig_callbacklineTo = 0;
  swig_callbackbezierTo = 0;
  swig_callbackquadTo = 0;
  swig_callbackclosePath = 0;
  swig_callbackdrawPath = 0;
  swig_callbacksaveClip = 0;
  swig_callbackrestoreClip = 0;
  swig_callbackclipRect = 0;
  swig_callbackclipPath = 0;
  swig_callbackdrawHandle = 0;
  swig_callbackdrawBitmap = 0;
  swig_callbackdrawTextAt = 0;
}

SwigDirector_GiView::SwigDirector_GiView() : GiView(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_GiView::~SwigDirector_GiView() {
  
}


void SwigDirector_GiView::regenAll() {
  if (!swig_callbackregenAll) {
    throw Swig::DirectorPureVirtualException("GiView::regenAll");
  } else {
    swig_callbackregenAll();
  }
}

void SwigDirector_GiView::regenAppend() {
  if (!swig_callbackregenAppend) {
    throw Swig::DirectorPureVirtualException("GiView::regenAppend");
  } else {
    swig_callbackregenAppend();
  }
}

void SwigDirector_GiView::redraw() {
  if (!swig_callbackredraw) {
    throw Swig::DirectorPureVirtualException("GiView::redraw");
  } else {
    swig_callbackredraw();
  }
}

bool SwigDirector_GiView::useFinger() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackuseFinger) {
    return GiView::useFinger();
  } else {
    jresult = (unsigned int) swig_callbackuseFinger();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiView::isContextActionsVisible() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisContextActionsVisible) {
    return GiView::isContextActionsVisible();
  } else {
    jresult = (unsigned int) swig_callbackisContextActionsVisible();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiView::showContextActions(mgvector< int > const &actions, mgvector< float > const &buttonXY, float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jactions = 0 ;
  void * jbuttonXY = 0 ;
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  
  if (!swig_callbackshowContextActions) {
    return GiView::showContextActions(actions,buttonXY,x,y,w,h);
  } else {
    jactions = (mgvector< int > *) &actions; 
    jbuttonXY = (mgvector< float > *) &buttonXY; 
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jresult = (unsigned int) swig_callbackshowContextActions(jactions, jbuttonXY, jx, jy, jw, jh);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_GiView::commandChanged() {
  if (!swig_callbackcommandChanged) {
    GiView::commandChanged();
    return;
  } else {
    swig_callbackcommandChanged();
  }
}

void SwigDirector_GiView::selectionChanged() {
  if (!swig_callbackselectionChanged) {
    GiView::selectionChanged();
    return;
  } else {
    swig_callbackselectionChanged();
  }
}

void SwigDirector_GiView::contentChanged() {
  if (!swig_callbackcontentChanged) {
    GiView::contentChanged();
    return;
  } else {
    swig_callbackcontentChanged();
  }
}

void SwigDirector_GiView::swig_connect_director(SWIG_Callback0_t callbackregenAll, SWIG_Callback1_t callbackregenAppend, SWIG_Callback2_t callbackredraw, SWIG_Callback3_t callbackuseFinger, SWIG_Callback4_t callbackisContextActionsVisible, SWIG_Callback5_t callbackshowContextActions, SWIG_Callback6_t callbackcommandChanged, SWIG_Callback7_t callbackselectionChanged, SWIG_Callback8_t callbackcontentChanged) {
  swig_callbackregenAll = callbackregenAll;
  swig_callbackregenAppend = callbackregenAppend;
  swig_callbackredraw = callbackredraw;
  swig_callbackuseFinger = callbackuseFinger;
  swig_callbackisContextActionsVisible = callbackisContextActionsVisible;
  swig_callbackshowContextActions = callbackshowContextActions;
  swig_callbackcommandChanged = callbackcommandChanged;
  swig_callbackselectionChanged = callbackselectionChanged;
  swig_callbackcontentChanged = callbackcontentChanged;
}

void SwigDirector_GiView::swig_init_callbacks() {
  swig_callbackregenAll = 0;
  swig_callbackregenAppend = 0;
  swig_callbackredraw = 0;
  swig_callbackuseFinger = 0;
  swig_callbackisContextActionsVisible = 0;
  swig_callbackshowContextActions = 0;
  swig_callbackcommandChanged = 0;
  swig_callbackselectionChanged = 0;
  swig_callbackcontentChanged = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_Ints(void * jarg1) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  
  arg1 = (mgvector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ints(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< int > *)new mgvector< int >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ints_count(void * jarg1) {
  int jresult ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int result;
  
  arg1 = (mgvector< int > *)jarg1; 
  result = (int)((mgvector< int > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ints_get(void * jarg1, int jarg2) {
  int jresult ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (mgvector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((mgvector< int > const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ints_set__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (mgvector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ints_set__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (mgvector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Floats(void * jarg1) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  
  arg1 = (mgvector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Floats(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< float > *)new mgvector< float >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Floats_count(void * jarg1) {
  int jresult ;
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int result;
  
  arg1 = (mgvector< float > *)jarg1; 
  result = (int)((mgvector< float > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Floats_get(void * jarg1, int jarg2) {
  float jresult ;
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (mgvector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((mgvector< float > const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Floats_set__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (mgvector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Floats_set__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (mgvector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Chars(void * jarg1) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  
  arg1 = (mgvector< char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Chars(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< char > *)new mgvector< char >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Chars_count(void * jarg1) {
  int jresult ;
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int result;
  
  arg1 = (mgvector< char > *)jarg1; 
  result = (int)((mgvector< char > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_Chars_get(void * jarg1, int jarg2) {
  char jresult ;
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (mgvector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char)((mgvector< char > const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Chars_set__SWIG_0(void * jarg1, int jarg2, char jarg3) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char arg3 ;
  
  arg1 = (mgvector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Chars_set__SWIG_1(void * jarg1, int jarg2, char jarg3, char jarg4) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char arg3 ;
  char arg4 ;
  
  arg1 = (mgvector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiCanvas(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_setPen(void * jarg1, int jarg2, float jarg3, int jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->setPen(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_setBrush(void * jarg1, int jarg2, int jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setBrush(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_clearRect(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->clearRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawRect(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6, unsigned int jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawRect(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawLine(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawEllipse(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6, unsigned int jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_beginPath(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->beginPath();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_moveTo(void * jarg1, float jarg2, float jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_lineTo(void * jarg1, float jarg2, float jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->lineTo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_bezierTo(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_quadTo(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->quadTo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_closePath(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->closePath();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawPath(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->drawPath(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_saveClip(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->saveClip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_restoreClip(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->restoreClip();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_clipRect(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->clipRect(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_clipPath(void * jarg1) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  result = (bool)(arg1)->clipPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawHandle(void * jarg1, float jarg2, float jarg3, int jarg4) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->drawHandle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawBitmap(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->drawBitmap((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiCanvas_drawTextAt(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  float jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  float result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (float)(arg1)->drawTextAt((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiCanvas() {
  void * jresult ;
  GiCanvas *result = 0 ;
  
  result = (GiCanvas *)new SwigDirector_GiCanvas();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_director_connect(void *objarg, SwigDirector_GiCanvas::SWIG_Callback0_t callback0, SwigDirector_GiCanvas::SWIG_Callback1_t callback1, SwigDirector_GiCanvas::SWIG_Callback2_t callback2, SwigDirector_GiCanvas::SWIG_Callback3_t callback3, SwigDirector_GiCanvas::SWIG_Callback4_t callback4, SwigDirector_GiCanvas::SWIG_Callback5_t callback5, SwigDirector_GiCanvas::SWIG_Callback6_t callback6, SwigDirector_GiCanvas::SWIG_Callback7_t callback7, SwigDirector_GiCanvas::SWIG_Callback8_t callback8, SwigDirector_GiCanvas::SWIG_Callback9_t callback9, SwigDirector_GiCanvas::SWIG_Callback10_t callback10, SwigDirector_GiCanvas::SWIG_Callback11_t callback11, SwigDirector_GiCanvas::SWIG_Callback12_t callback12, SwigDirector_GiCanvas::SWIG_Callback13_t callback13, SwigDirector_GiCanvas::SWIG_Callback14_t callback14, SwigDirector_GiCanvas::SWIG_Callback15_t callback15, SwigDirector_GiCanvas::SWIG_Callback16_t callback16, SwigDirector_GiCanvas::SWIG_Callback17_t callback17, SwigDirector_GiCanvas::SWIG_Callback18_t callback18, SwigDirector_GiCanvas::SWIG_Callback19_t callback19) {
  GiCanvas *obj = (GiCanvas *)objarg;
  SwigDirector_GiCanvas *director = dynamic_cast<SwigDirector_GiCanvas *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_regenAll(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->regenAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_regenAppend(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->regenAppend();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_redraw(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->redraw();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_useFinger(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->useFinger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_useFingerSwigExplicitGiView(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->GiView::useFinger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_isContextActionsVisible(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->isContextActionsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_isContextActionsVisibleSwigExplicitGiView(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->GiView::isContextActionsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_showContextActions(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  mgvector< float > *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (mgvector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > const & type is null", 0);
    return 0;
  } 
  arg3 = (mgvector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->showContextActions((mgvector< int > const &)*arg2,(mgvector< float > const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_showContextActionsSwigExplicitGiView(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  mgvector< float > *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (mgvector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > const & type is null", 0);
    return 0;
  } 
  arg3 = (mgvector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->GiView::showContextActions((mgvector< int > const &)*arg2,(mgvector< float > const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_commandChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->commandChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_commandChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::commandChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_selectionChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->selectionChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_selectionChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::selectionChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_contentChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->contentChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_contentChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::contentChanged();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiView() {
  void * jresult ;
  GiView *result = 0 ;
  
  result = (GiView *)new SwigDirector_GiView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_director_connect(void *objarg, SwigDirector_GiView::SWIG_Callback0_t callback0, SwigDirector_GiView::SWIG_Callback1_t callback1, SwigDirector_GiView::SWIG_Callback2_t callback2, SwigDirector_GiView::SWIG_Callback3_t callback3, SwigDirector_GiView::SWIG_Callback4_t callback4, SwigDirector_GiView::SWIG_Callback5_t callback5, SwigDirector_GiView::SWIG_Callback6_t callback6, SwigDirector_GiView::SWIG_Callback7_t callback7, SwigDirector_GiView::SWIG_Callback8_t callback8) {
  GiView *obj = (GiView *)objarg;
  SwigDirector_GiView *director = dynamic_cast<SwigDirector_GiView *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_r_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_r_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_g_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_g_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_b_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_b_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_a_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_a_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_0() {
  void * jresult ;
  GiColor *result = 0 ;
  
  result = (GiColor *)new GiColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_2(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_3(void * jarg1) {
  void * jresult ;
  GiColor *arg1 = 0 ;
  GiColor *result = 0 ;
  
  arg1 = (GiColor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = (GiColor *)new GiColor((GiColor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_4(int jarg1, unsigned int jarg2) {
  void * jresult ;
  int arg1 ;
  bool arg2 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiColor *)new GiColor(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_5(int jarg1) {
  void * jresult ;
  int arg1 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GiColor *)new GiColor(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_White() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::White();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_Black() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::Black();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_Invalid() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::Invalid();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiColor_getARGB(void * jarg1) {
  int jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  int result;
  
  arg1 = (GiColor *)jarg1; 
  result = (int)((GiColor const *)arg1)->getARGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_setARGB(void * jarg1, int jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setARGB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_set__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_set__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiColor_isInvalid(void * jarg1) {
  unsigned int jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  bool result;
  
  arg1 = (GiColor *)jarg1; 
  result = (bool)((GiColor const *)arg1)->isInvalid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiColor_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  GiColor *arg2 = 0 ;
  bool result;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = (bool)((GiColor const *)arg1)->equals((GiColor const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiColor(void * jarg1) {
  GiColor *arg1 = (GiColor *) 0 ;
  
  arg1 = (GiColor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_0() {
  void * jresult ;
  GiContext *result = 0 ;
  
  result = (GiContext *)new GiContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_1(float jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  bool arg5 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (GiColor *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_2(float jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (GiColor *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_3(float jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_4(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (GiContext *)new GiContext(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_5(float jarg1) {
  void * jresult ;
  float arg1 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GiContext *)new GiContext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_6(void * jarg1) {
  void * jresult ;
  GiContext *arg1 = 0 ;
  GiContext *result = 0 ;
  
  arg1 = (GiContext *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  result = (GiContext *)new GiContext((GiContext const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_copy__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  GiContext *result = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_copy__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  GiContext *result = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  result = (bool)((GiContext const *)arg1)->equals((GiContext const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getLineStyle(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getLineStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineStyle(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineStyle(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiContext_getLineWidth(void * jarg1) {
  float jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  float result;
  
  arg1 = (GiContext *)jarg1; 
  result = (float)((GiContext const *)arg1)->getLineWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_isAutoScale(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->isAutoScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineWidth(void * jarg1, float jarg2, unsigned int jarg3) {
  GiContext *arg1 = (GiContext *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setLineWidth(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_isNullLine(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->isNullLine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setNullLine(void * jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  arg1 = (GiContext *)jarg1; 
  (arg1)->setNullLine();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_getLineColor(void * jarg1) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  arg1 = (GiContext *)jarg1; 
  result = ((GiContext const *)arg1)->getLineColor();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineColor__SWIG_0(void * jarg1, void * jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return ;
  } 
  (arg1)->setLineColor((GiColor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineColor__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLineColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineColor__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setLineColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getLineARGB(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getLineARGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineARGB(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineARGB(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getLineAlpha(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getLineAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineAlpha(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineAlpha(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_hasFillColor(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->hasFillColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setNoFillColor(void * jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  arg1 = (GiContext *)jarg1; 
  (arg1)->setNoFillColor();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_getFillColor(void * jarg1) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  arg1 = (GiContext *)jarg1; 
  result = ((GiContext const *)arg1)->getFillColor();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillColor__SWIG_0(void * jarg1, void * jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return ;
  } 
  (arg1)->setFillColor((GiColor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillColor__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setFillColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillColor__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setFillColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getFillARGB(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getFillARGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillARGB(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillARGB(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getFillAlpha(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getFillAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillAlpha(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillAlpha(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_isAutoFillColor(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->isAutoFillColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setAutoFillColor(void * jarg1, unsigned int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoFillColor(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getType(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiContext(void * jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  arg1 = (GiContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiCoreView__SWIG_0(void * jarg1) {
  void * jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiCoreView *result = 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (GiCoreView *)new GiCoreView(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiCoreView__SWIG_1() {
  void * jresult ;
  GiCoreView *result = 0 ;
  
  result = (GiCoreView *)new GiCoreView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiCoreView(void * jarg1) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_createView__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->createView(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_createView__SWIG_1(void * jarg1, void * jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  (arg1)->createView(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_createMagnifierView(void * jarg1, void * jarg2, void * jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiView *arg3 = (GiView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiView *)jarg3; 
  (arg1)->createMagnifierView(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_destoryView(void * jarg1, void * jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  (arg1)->destoryView(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_drawAll(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiCanvas *)jarg3; 
  result = (int)(arg1)->drawAll(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_drawAppend(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiCanvas *)jarg3; 
  result = (bool)(arg1)->drawAppend(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_dynDraw(void * jarg1, void * jarg2, void * jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiCanvas *)jarg3; 
  (arg1)->dynDraw(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_setBkColor(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->setBkColor(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setScreenDpi(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  GiCoreView::setScreenDpi(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_onSize(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->onSize(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_onGesture__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5, float jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureType arg3 ;
  GiGestureState arg4 ;
  float arg5 ;
  float arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureType)jarg3; 
  arg4 = (GiGestureState)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->onGesture(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_onGesture__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureType arg3 ;
  GiGestureState arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureType)jarg3; 
  arg4 = (GiGestureState)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->onGesture(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_twoFingersMove__SWIG_0(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureState arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureState)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->twoFingersMove(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_twoFingersMove__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureState arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureState)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->twoFingersMove(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_isPressDragging(void * jarg1) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (bool)(arg1)->isPressDragging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getGestureType(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiGestureType result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (GiGestureType)(arg1)->getGestureType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getGestureState(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiGestureState result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (GiGestureState)(arg1)->getGestureState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GiCoreView_getCommand(void * jarg1) {
  char * jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *result = 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (char *)((GiCoreView const *)arg1)->getCommand();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_setCommand(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setCommand(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_doContextAction(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->doContextAction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_clearCachedData(void * jarg1) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_addShapesForTest(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (int)(arg1)->addShapesForTest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getShapeCount(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (int)(arg1)->getShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getChangeCount(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (int)(arg1)->getChangeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getSelectedShapeCount(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (int)(arg1)->getSelectedShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getSelectedShapeType(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (int)(arg1)->getSelectedShapeType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_clear(void * jarg1) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_loadFromFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->loadFromFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_saveToFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->saveToFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_saveToFile__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->saveToFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GiCoreView_getContent(void * jarg1) {
  char * jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *result = 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (char *)(arg1)->getContent();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_freeContent(void * jarg1) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  (arg1)->freeContent();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_setContent(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setContent((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_zoomToExtent(void * jarg1) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (bool)(arg1)->zoomToExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_zoomToModel(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->zoomToModel(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiCoreView_calcPenWidth(void * jarg1, float jarg2) {
  float jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->calcPenWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreView_getContext(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  GiContext *result = 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiContext *) &(arg1)->getContext(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setContext__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setContext((GiContext const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setContext__SWIG_1(void * jarg1, int jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setContextEditing(void * jarg1, unsigned int jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setContextEditing(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_addImageShape(void * jarg1, char * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->addImageShape((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_getBoundingBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getBoundingBox(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_initRand() {
  TestCanvas::initRand();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_randInt(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TestCanvas::randInt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TestCanvas_randFloat(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)TestCanvas::randFloat(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_test__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  TestCanvas::test(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_test__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TestCanvas::test(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_test__SWIG_2(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::test(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testRect(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testRect(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testLine(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testLine(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testEllipse(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testEllipse(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testQuadBezier(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testQuadBezier(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testCubicBezier(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testCubicBezier(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testPolygon(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testPolygon(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testClipPath(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testClipPath(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testHandle(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testHandle(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testDynCurves(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  TestCanvas::testDynCurves(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testTextAt(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testTextAt(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TestCanvas() {
  void * jresult ;
  TestCanvas *result = 0 ;
  
  result = (TestCanvas *)new TestCanvas();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TestCanvas(void * jarg1) {
  TestCanvas *arg1 = (TestCanvas *) 0 ;
  
  arg1 = (TestCanvas *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiMouseHelper(void * jarg1, void * jarg2) {
  void * jresult ;
  GiView *arg1 = (GiView *) 0 ;
  GiCoreView *arg2 = (GiCoreView *) 0 ;
  GiMouseHelper *result = 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (GiCoreView *)jarg2; 
  result = (GiMouseHelper *)new GiMouseHelper(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onLButtonDown(void * jarg1, float jarg2, float jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->onLButtonDown(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onRButtonDown(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->onRButtonDown(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onMouseUp(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->onMouseUp(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onMouseMove(void * jarg1, float jarg2, float jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->onMouseMove(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onLButtonDblClk(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->onLButtonDblClk(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onKeyDown(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->onKeyDown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiMouseHelper(void * jarg1) {
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  
  arg1 = (GiMouseHelper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EduCmds_registerCmds(void * jarg1) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  EduCmds::registerCmds(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EduCmds_getDimensions(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  mgvector< char > *arg3 = 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (mgvector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< char > & type is null", 0);
    return 0;
  } 
  result = (int)EduCmds::getDimensions(arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EduCmds() {
  void * jresult ;
  EduCmds *result = 0 ;
  
  result = (EduCmds *)new EduCmds();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EduCmds(void * jarg1) {
  EduCmds *arg1 = (EduCmds *) 0 ;
  
  arg1 = (EduCmds *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

