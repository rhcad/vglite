/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class DemoTrade : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DemoTrade(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DemoTrade obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DemoTrade() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgcsPINVOKE.delete_DemoTrade(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static void registerCmds() {
    touchvgcsPINVOKE.DemoTrade_registerCmds();
  }

  public static int getDimensions(GiCoreView coreView, Floats vars, Chars types) {
    int ret = touchvgcsPINVOKE.DemoTrade_getDimensions(GiCoreView.getCPtr(coreView), Floats.getCPtr(vars), Chars.getCPtr(types));
    if (touchvgcsPINVOKE.SWIGPendingException.Pending) throw touchvgcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DemoTrade() : this(touchvgcsPINVOKE.new_DemoTrade(), true) {
  }

}

}
